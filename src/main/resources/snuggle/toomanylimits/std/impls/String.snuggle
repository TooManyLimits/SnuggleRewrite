import "std/types/Inc"
import "std/impls/iterator"

pub impl String {

    // Overload the # operator .size() to get the length
    // of the string in chars.
    fn size(): u32 this.length

    // Operator overload to check equality of strings:
    fn eq(other: String): bool {
        // If length is different, immediately rule it out
        if #this != #other return false
        // Iterate over the chars. If any is different, return false.
        let mut i: u32 = 0
        while i < length {
            if this[start + i] != other[other.start + i]
                return false
            i = i + 1
        }
        // Otherwise, return true.
        return true
    }

    // Concatenate the two strings together into a new one
    fn add(other: String): String {
        let chars = new char[](#this + #other)
        for (i, c) in this.chars().indexed() {
            chars[i] = c
        }
        for (i, c) in other.chars().indexed() {
            chars[#this + i] = c
        }
        new(chars, 0, #chars)
    }

    // Get an iterator over the characters of this string.
    fn chars(): () -> char? {
        // Create an incrementor and a closure
        let i = new Inc<u32>()
        fn() {
            if *i >= #this {
                // If we've reached the end of the string, return empty
                new()
            } else {
                // Otherwise, return a full option of the i'th character,
                // and increment i.
                new(this[i()])
            }
        }
    }

}
